# -*- coding: utf-8 -*-
"""BreastCancerDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SverdiQfMPd7EKwljnuPE0W1O9MooGU4
"""

## BREAST CANCER DETECTION

#Import Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#Load the data
from google.colab import files
uploaded = files.upload()
df = pd.read_csv('data.csv')
df.head(7)

#Count the number of rows and columns in the dataset
df.shape

#Count the number of empty values in each column.Empty means NaN,NAN,na format.
df.isna().sum()

#Drop the Unnamed column because it includes 569 missing values
df = df.dropna(axis=1)

#Get the new count of the number of rÄ±ows and columns.
df.shape

#Get a count of the number of Malognant(M) or Benign(B) cells
df['diagnosis'].value_counts()

#visualize the count
sns.countplot(df['diagnosis'],label='count')

#Look at the data types to see which columns need to be encoded
df.dtypes

#Encode the categorical data values
from sklearn.preprocessing import LabelEncoder
labelencoder_Y = LabelEncoder()
df.iloc[:,1] = labelencoder_Y.fit_transform(df.iloc[:,1].values)

# df.iloc[:,1].values --> m represents as 1 , B represents as 0

#Create a pair plot
sns.pairplot(df.iloc[:,1:5], hue = "diagnosis")

#Print the first 10 rows of the new data.
df.head(10)

#Get the correlation values
df.iloc[:,1:12].corr()

#Visualize the correlations
plt.figure(figsize = (10,10))
sns.heatmap(df.iloc[:,1:12].corr(), annot = True, fmt = '.0%')

#Split the data set into independent(x) and dependent(y) data sets
x = df.iloc[:,2:31].values
y = df.iloc[:,1].values

#Split the dataset into 75% training and 25% testing
from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(x, y, test_size = 0.25, random_state = 0)

#Scale the data
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.fit_transform(X_test)

#Create a function for the models
def models(X_train, Y_train):
  
  #Logistic Regression
  from sklearn.linear_model import LogisticRegression
  log = LogisticRegression(random_state = 0)
  log.fit(X_train,Y_train)
  
  #Decision Tree
  from sklearn.tree import DecisionTreeClassifier
  tree = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)
  tree.fit(X_train,Y_train)

  #Random Forest Classifier
  from sklearn.ensemble import RandomForestClassifier
  forest = RandomForestClassifier(n_estimators = 10, criterion = 'entropy', random_state = 0)
  forest.fit(X_train,Y_train)

  #Print the models accuracy on the training data
  print('[0]Logistic Regression Training Accuracy : ', log.score(X_train,Y_train))
  print('[1]Decision Tree Training Accuracy : ', tree.score(X_train,Y_train))
  print('[2]Random Forest Training Accuracy : ', forest.score(X_train,Y_train))

  return log, tree, forest

#Getting all of the models
model = models(X_train, Y_train)

#test model accuracy on test-data confusion matrix
from sklearn.metrics import confusion_matrix
for i in range(len(model)):
  print("Model ",i)
  cm = confusion_matrix(Y_test, model[i].predict(X_test))

  TP = cm[0][0]
  TN = cm[1][1]
  FN = cm[1][0]
  FP = cm[0][1]

  print(cm)
  print('Testing Accuracy = ', (TP + TN) / (TP + TN + FP + FN))
  print()

#Show another way yo get emtrics of models
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score
for i in range(len(model)):
  print("Model ",i)
  print(classification_report(Y_test, model[i].predict(X_test)))
  print(accuracy_score(Y_test, model[i].predict(X_test)))
  print()

#I think
#This is the best model is Decsiion Tree because when observing the training and test results,the concurreny is significantly good fit for this dataset.

#Print the prediction of Random Forest Classifier Model
pred = model[2].predict(X_test)
print(pred) #cancer cell detection array
print()
print(Y_test) #actual cancer cell results

#Print the prediction of Decision Tree Classifier Model
pred = model[1].predict(X_test)
print(pred) #cancer cell detection array
print()
print(Y_test) #actual cancer cell results

#Print the prediction of Logistic Regression Classifier Model
pred = model[0].predict(X_test)
print(pred) #cancer cell detection array
print()
print(Y_test) #actual cancer cell results

